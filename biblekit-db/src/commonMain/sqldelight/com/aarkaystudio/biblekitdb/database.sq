-- Bible.sq

CREATE TABLE IF NOT EXISTS Verse (
  id INTEGER NOT NULL PRIMARY KEY,
  number TEXT NOT NULL UNIQUE,
  text TEXT NOT NULL,
  searchText TEXT NOT NULL
);

CREATE INDEX IF NOT EXISTS Verse_on_searchText ON Verse(searchText);

CREATE VIRTUAL TABLE IF NOT EXISTS VerseFts USING FTS4(searchText TEXT NOT NULL, content=Verse);

CREATE TRIGGER IF NOT EXISTS __VerseFts_ai AFTER INSERT ON `Verse` BEGIN
    INSERT INTO `VerseFts`(`docid`, `searchText`) VALUES (new.`rowid`, new.`searchText`);
END;

CREATE TRIGGER IF NOT EXISTS __VerseFts_au AFTER UPDATE ON `Verse` BEGIN
    INSERT INTO `VerseFts`(`docid`, `searchText`) VALUES (new.`rowid`, new.`searchText`);
END;

CREATE TRIGGER IF NOT EXISTS __VerseFts_bu BEFORE UPDATE ON `Verse` BEGIN
    DELETE FROM `VerseFts` WHERE `docid`=old.`rowid`;
END;

CREATE TRIGGER IF NOT EXISTS __VerseFts_bd BEFORE DELETE ON `Verse` BEGIN
    DELETE FROM `VerseFts` WHERE `docid`=old.`rowid`;
END;

-- BibleQueries.sq (this will be generated by SQLDelight)

insertVerse:
INSERT INTO Verse(id, number, text, searchText) VALUES (?, ?, ?, ?);

getAllVersesByIDs:
SELECT Verse.* FROM Verse WHERE Verse.id IN ? ORDER BY Verse.id LIMIT :limit OFFSET :offset;

getAllVersesByIDsAndText:
SELECT Verse.* FROM Verse JOIN VerseFts ON VerseFts.docid == Verse.id AND VerseFts.searchText == Verse.searchText WHERE Verse.id IN ? AND VerseFts.searchText MATCH ? ORDER BY Verse.id LIMIT :limit OFFSET :offset;

getAllVersesInRange:
SELECT Verse.* FROM Verse WHERE Verse.id BETWEEN ? AND ? ORDER BY Verse.id LIMIT :limit OFFSET :offset;

getAllVersesInRangeAndText:
SELECT Verse.* FROM Verse JOIN VerseFts ON VerseFts.docid == Verse.id AND VerseFts.searchText == Verse.searchText WHERE Verse.id BETWEEN ? AND ? AND VerseFts.searchText MATCH ? ORDER BY Verse.id LIMIT :limit OFFSET :offset;

getAllVersesByText:
SELECT Verse.* FROM Verse JOIN VerseFts ON VerseFts.docid == Verse.id AND VerseFts.searchText == Verse.searchText WHERE VerseFts.searchText MATCH ? ORDER BY Verse.id LIMIT :limit OFFSET :offset;
